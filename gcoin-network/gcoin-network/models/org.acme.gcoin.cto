/**
 * Write your model definitions here
 */

namespace org.acme.gcoin

// ******
// Assets
// ******

asset Wallet identified by walletId {
  o String walletId
  o Double gcoinBalance
}

// ************
// Participants
// ************ 

participant Bank identified by email {
  o String email
  o String name
  --> Wallet wallet
}

participant Golfer identified by email {
  o String email
  o String firstName
  o String lastName
  o Integer age
  --> Wallet wallet
}

participant GolfCourse identified by email {
  o String email
  o String name
  --> Wallet wallet
}

// ******
// Assets
// ******


enum GcoinRequestType {
  o BUY
  o SELL
}

asset GcoinRequest identified by gcoinRequestId {
  o String gcoinRequestId
  --> Golfer requester
  --> Bank bank
  o GcoinRequestType requestType
  o Double amount range=[0.0,]
  o DateTime requestDate
  o DateTime processDate
}

asset Membership identified by membershipId {
  o String membershipId
  --> GolfCourse golfCourse
  o Integer age default = 20             // requirements for joining
  o Double handicap default = 30.        // requirements for joining
  o Double transferFee default = 300000. // requirements for joining
  --> Golfer holder
  o String signature                     // Golf course's signature 
}

asset HcCert identified by hcCertId {
  o String hcCertId
  --> GolfCourse issuingGolfCourse
  --> Golfer golfer
  o Double handicap
  o String signature                     // Golf course's signature 
}

enum sellMembershipOrderState {
  o FOR_SALE
  o SOLD
  o NOT_FOR_SALE
}

asset SellMembershipOrder identified by sellMembershipOrderId {
  o String sellMembershipOrderId
  --> Golfer seller
  --> Membership membership
  o Double sellPrice
  o sellMembershipOrderState state default = "NOT_FOR_SALE"
  --> Golfer buyer
  o DateTime sellDate
  o DateTime buyDate
  o DateTime transferDate
}

// ****************************************************
// Transactions and events for selling and buying gcoin
// **************************************************** 

transaction CreateGcoinRequest {
  o String gcoinRequestId
  --> Golfer requester
  --> Bank bank
  o GcoinRequestType requestType
  o Double amount range=[0.0,]
}

transaction ProcessGcoinRequest {
  --> GcoinRequest gcoinRequest
}

event CreatedGcoinRequestEvent {
  --> GcoinRequest gcoinRequest
}

event CompletedGcoinRequestEvent {
  --> GcoinRequest gcoinRequest
}

// **********************************************************
// Transactions and events for selling and buying memberships
// **********************************************************

transaction CreateMembershipOrder {
  --> SellMembershipOrder sellMembershipOrder
}

transaction BuyMembershipOrder {
  --> SellMembershipOrder sellMembershipOrder
}

transaction TransferMembership {
  --> SellMembershipOrder sellMembershipOrder
}

event BoughtMembershipOrderEvent {
  --> SellMembershipOrder sellMembershipOrder
}

event CompletedMembershipOrderEvent {
  --> SellMembershipOrder sellMembershipOrder
}

